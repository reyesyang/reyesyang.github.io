<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Reyes Yang 的个人博客</title>
 <link href="http://reyesyang.github.io//atom.xml" rel="self"/>
 <id>http://reyesyang.github.io/</id>
 <updated>2015-12-24T21:55:10+08:00</updated>
 <author>
   <name>Reyes Yang</name>
   <uri>http://reyesyang.info</uri>
   <email>reyes.yang@gmail.com</email>
 </author>

 

 <entry>
   <title>[翻译] Ruby 元编程：都是 Self 的事</title>
   <link href="http://reyesyang.github.io//2015/12/24/metaprogramming-in-ruby-all-about-the-self.html"/>
   <id>http://reyesyang.github.io//2015/12/24/metaprogramming-in-ruby-all-about-the-self</id>
   <updated>2015-12-24T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;本文翻译自 Yehuda Katz 的博客文章 &lt;a href=&quot;http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/&quot;&gt;Metaprogramming in Ruby: It’s All About the Self&lt;/a&gt;&lt;/p&gt; &lt;p&gt;在我写完上篇&lt;a href=&quot;http://yehudakatz.com/2009/11/12/better-ruby-idioms/&quot;&gt;关于 Rails 插件的惯用语法的文章&lt;/a&gt;后，我意识到 Ruby 元编程，就核心而言，其实非常简单。&lt;/p&gt; &lt;p&gt;归根结底是因为所有的 Ruby 代码都是可执行代码 —— 不需要额外的编译或者运行时阶段。在 Ruby 中，每一行代码都是针对一个特定的 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; 执行的。考虑下面五段代码：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Homo Sapien&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;...</content>
 </entry>

 

 <entry>
   <title>[翻译] 词法作用域和 Ruby 中的类变量</title>
   <link href="http://reyesyang.github.io//2015/12/24/lexical-scoping-and-ruby-class-variable.html"/>
   <id>http://reyesyang.github.io//2015/12/24/lexical-scoping-and-ruby-class-variable</id>
   <updated>2015-12-24T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;本文翻译自 Starr Horne 发表在 Honeybadger 上的文章：&lt;a href=&quot;http://blog.honeybadger.io/lexical-scoping-and-ruby-class-variables/&quot;&gt;Lexical scoping and Ruby class variables&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Ruby 的类变量时常让人感到迷惑。即使是有经验的 Ruby 程序员也觉得它们很难理解。最明显的一个例子就是继承：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;vc&quot;&gt;@@kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;vc&quot;&gt;@@kind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;vc&quot;&gt;@@kind&lt;/span&gt;...</content>
 </entry>

 

 <entry>
   <title>[翻译] 理解 Ruby 中的作用域</title>
   <link href="http://reyesyang.github.io//2015/12/23/understanding-scope-in-ruby.html"/>
   <id>http://reyesyang.github.io//2015/12/23/understanding-scope-in-ruby</id>
   <updated>2015-12-23T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;本文翻译自 Darko Gjorgjievski 发表在 sitepoint 上的文章 &lt;a href=&quot;http://www.sitepoint.com/understanding-scope-in-ruby/&quot;&gt;Understanding Scope in Ruby&lt;/a&gt;&lt;/p&gt; &lt;p&gt;作用域（Scope）是非常必要去理解的概念，而且不仅仅是在 Ruby 中，在其他编程语言中也一样。回想起我以前刚开始使用 Ruby 的日子，编程中遇到的大半错误都是由于我没有充分理解这个概念。比如为定义变量，变量的错误赋值等等。一旦你很好的理解了作用与，就不会再遇到这些让人头痛的问题啦！希望通过这篇文章能帮助你避免很多我翻过的错误。&lt;/p&gt; &lt;h4 id=&quot;section&quot;&gt;作用域究竟是什么？&lt;/h4&gt; &lt;p&gt;当人们提起作用域的时候，通常会想到两个词语：&lt;strong&gt;变量&lt;/strong&gt; 和 &lt;strong&gt;可见性&lt;/strong&gt;。这很直观：作用域就是在哪些地方可以访问哪些东西。就是在具体的某一时刻，什么东西（变量，常量，方法）是你可以使用的。如果你理解了作用域，你就可以指出 Ruby 程序中任何一行代码的上下文中，哪些变量是可以使用的，更重要的是，哪些不能使用。&lt;/p&gt; &lt;p&gt;那么首先让我们考虑下限制变量可见性的原因是什么？为什么不让所有变量在任何时候都能使用？那样的话编程不就更方便一些，不是吗？的确没有这么简单……&lt;/p&gt; &lt;p&gt;程序员们有很多事情存在争议（使用函数式还是面向对象的方式，使用不同的变量命名模板等等），但是作用域并不在其中。尤其当程序员随着编程阅历的增加，他们更加支持作用域的存在，为什么呢？&lt;/p&gt; &lt;p&gt;因为随着越来越多的编程阅历的增加，你越有机会体会到让所有的变量任何时候都能访问到是多么可怕的事情。&lt;a href=&quot;http://programmers.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;全局状态(Global State)&lt;/a&gt;让我们的程序运行非常难以预测。当所有人都能修改它时，我们很难追踪到始作俑者。谁修改了这个变量？谁读取了它？想想如果我们在面对成千上万行代码的时候都会面临这样的问题！&lt;/p&gt; &lt;p&gt;而且还会引入命名问题。假设你有一庞大的程序，以免命名冲突，你不得不给每一个变量一个唯一的名字。想想，这就需要你跟踪成千上万的变量名。&lt;/p&gt; &lt;p&gt;作用域类似于计算机科学的另一个原则：&lt;a href=&quot;http://etutorials.org/Server+Administration/securing+windows+server+2003/Chapter+2.+Basics+of+Computer+Security/2.3+POLA+The+Principle+of+Least+Access/&quot;&gt;最小可访问原则（The Principle of Least Access）&lt;/a&gt;。想象一下如果银行中的每个员工（出纳，会计）都能（读取和修改）每个客户，财务等等的记录。突然，有人修改了客户的存款余额。是出纳还是会计做的？还是有可能他们都做过？你明白我要表达的意思了吧。&lt;/p&gt; &lt;h4 id=&quot;ruby-&quot;&gt;Ruby 变量作用域：快速参考&lt;/h4&gt; &lt;p&gt;你可能已经了解了，Ruby 在不同的作用域中定义了变量。我知道很多教程都已经简要的描述了它们（变量的类型），但是它们却恰恰没有提到它们的作用域是什么。这里我将详细说明下：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;类变量（@@a_variable）：在类和所有子类的定义中有效，其余地方均无效。&lt;/li&gt; &lt;li&gt;实例变量（@a_variable）：仅在某个特定的对象中有效，贯穿一个类实例中的所有方法。但是在类定义中直接使用无效。&lt;/li&gt; &lt;li&gt;全局变量（$a_variable）：在 Ruby 脚本的任何地方都有效。&lt;/li&gt; &lt;li&gt;局部变量（a_variable）：取决于作用域。这是我们最常打交道的，也是最容易出错的，因为它依赖于很多因素。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;通过&lt;a href=&quot;http://natashatherobot.com/ruby-variable-scope/&quot;&gt;一个插图&lt;/a&gt;来直观的展示下这四种不同作用域的可见性。你将对他们的范围和有效性有一个大概的了解：&lt;/p&gt;...</content>
 </entry>

 

 <entry>
   <title>Git fetch, pull, checkout 和 push 简介</title>
   <link href="http://reyesyang.github.io//2014/02/26/git-fetch-pull-checkout-push-introduction.html"/>
   <id>http://reyesyang.github.io//2014/02/26/git-fetch-pull-checkout-push-introduction</id>
   <updated>2014-02-26T00:00:00+08:00</updated>
   <content type="html">&lt;h4 id=&quot;git-fetch&quot;&gt;git fetch&lt;/h4&gt; &lt;p&gt;获取远程仓库更新到本地仓库&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; 不加任何参数时，如果当前分支没有设置上游(upstream)分支，则默认获取 origin 远程仓库的更新，否则获取跟踪分支对应远程仓库的更新。&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch --all&lt;/code&gt; 则会获取所有远程仓库的更新。&lt;/p&gt; &lt;h4 id=&quot;git-pull&quot;&gt;git pull&lt;/h4&gt; &lt;p&gt;获取远程仓库更新到本地仓库，并且合并当前所在分支所对应的上游(upstream)分支代码。等价于下面的两步操作：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch git merge FETCH_HEAD &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --rebase&lt;/code&gt; 命令也经常会使用到，该命令会在合并操作之前先进行一次衍合(rebase)操作。&lt;br /&gt; 假设当前在 master 分支，并且 master 的跟踪分支为 origin/master，则 &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --rebase&lt;/code&gt; 等价于下面的三步操作：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git pull git...</content>
 </entry>

 

 <entry>
   <title>Ruby 中的循环控制语句</title>
   <link href="http://reyesyang.github.io//2014/01/14/loops-control-flow-in-ruby.html"/>
   <id>http://reyesyang.github.io//2014/01/14/loops-control-flow-in-ruby</id>
   <updated>2014-01-14T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;Ruby 中常用到的循环控制语句包括：next、break、redo、retry 四种，下面就详细看看使用情景：&lt;/p&gt; &lt;h4 id=&quot;next&quot;&gt;next&lt;/h4&gt; &lt;p&gt;退出包含 next 的最内层循环的当前迭代，执行下一迭代&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span...</content>
 </entry>

 

 <entry>
   <title>Ruby 中的循环语句</title>
   <link href="http://reyesyang.github.io//2014/01/13/loops-in-ruby.html"/>
   <id>http://reyesyang.github.io//2014/01/13/loops-in-ruby</id>
   <updated>2014-01-13T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;由于 Ruby 提供了很多便捷的方法进行对象的循环遍历，如：Array#each、Integer#times、Integer#downto、Integer#upto、Kernel#loop 等，所以日常的开发中很少会需要写循环语句。便整理了相关内容，方便日后查看参考。&lt;/p&gt; &lt;p&gt;Ruby 中的循环语句有 &lt;code class=&quot;highlighter-rouge&quot;&gt;for...in&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;until&lt;/code&gt; 三种，具体使用方法如下：&lt;/p&gt; &lt;h4 id=&quot;forin&quot;&gt;for…in&lt;/h4&gt; &lt;p&gt;遍历集合中的所有成员&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h4 id=&quot;while&quot;&gt;while&lt;/h4&gt; &lt;p&gt;当条件成立时，执行循环体&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;...</content>
 </entry>

 

 <entry>
   <title>Ruby 中的 Shallow copy 和 Deep copy</title>
   <link href="http://reyesyang.github.io//2013/10/16/shallow-and-deep-copy-in-ruby.html"/>
   <id>http://reyesyang.github.io//2013/10/16/shallow-and-deep-copy-in-ruby</id>
   <updated>2013-10-16T00:00:00+08:00</updated>
   <content type="html">&lt;h4 id=&quot;shallow-copy&quot;&gt;什么是 Shallow copy？&lt;/h4&gt; &lt;p&gt;引用 Wikipedia 中的定义如下：&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;One method of copying an object is the shallow copy. In the process of shallow copying A, B will copy all of A’s field values. If the field value is a memory address it copies the memory address, and if the field...</content>
 </entry>

 

 <entry>
   <title>Ruby 中的 dup 和 clone</title>
   <link href="http://reyesyang.github.io//2013/10/12/dup-and-clone-in-ruby.html"/>
   <id>http://reyesyang.github.io//2013/10/12/dup-and-clone-in-ruby</id>
   <updated>2013-10-12T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;&lt;del&gt;前段时间项目中有个地方需要在 ActiveRecord 对象被删除后继续使用对象的一些属性进行些操作，很自然想到了在删除前把对象复制一份&lt;/del&gt;(删除说明：AR 对象调用 destroy 方法删除对象时，也只是删除了数据库中的记录，实际上该对象还是存在的，不过已经变为了 frozen 的状态)，然后就接触到了 dup 和 clone 方法，看了文档后感觉二者还是比较容易搞混淆，结合一些搜索到的资料便做个记录。&lt;/p&gt; &lt;h4 id=&quot;dup-httpruby-docorgcore-200objecthtmlmethod-i-dup&quot;&gt;dup &lt;a href=&quot;http://ruby-doc.org/core-2.0.0/Object.html#method-i-dup&quot;&gt;官方文档&lt;/a&gt;&lt;/h4&gt; &lt;blockquote&gt; &lt;p&gt;Produces a shallow copy of obj—the instance variables of obj are copied, but not the objects they reference. dup copies the tainted state of obj. See also the discussion under Object#clone. In general,...</content>
 </entry>

 

</feed>
